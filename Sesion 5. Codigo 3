package com.example.practica4

import androidx.compose.foundation.background
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.runtime.Composable
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.constraintlayout.compose.ConstraintLayout

@Preview
@Composable
fun ConstraintExample() {
    ConstraintLayout(
        modifier = Modifier.fillMaxSize()
    ) {
        val (box1, box2, box3, box4, box5, containerBox) = createRefs()
        Box(
            modifier = Modifier
                .size(120.dp)
                .background(Color.Red)
                .constrainAs(box1) {
                    centerTo(parent)
                }
        )
        Box(
            modifier = Modifier
                .size(120.dp)
                .background(Color.Blue)
                .constrainAs(box2) {
                    bottom.linkTo(box1.top)
                    end.linkTo(box1.start)
                }
        )
        Box(
            modifier = Modifier
                .size(120.dp)
                .background(Color.Magenta)
                .constrainAs(box3) {
                    bottom.linkTo(box1.top)
                    start.linkTo(box1.end)
                }
        )

        Box(
            modifier = Modifier
                .size(120.dp)
                .background(Color.Yellow)
                .constrainAs(box4) {
                    top.linkTo(box1.bottom)
                    end.linkTo(box1.start)
                }
        )

        Box(
            modifier = Modifier
                .size(120.dp)
                .background(Color.Green)
                .constrainAs(box5) {
                    top.linkTo(box1.bottom)
                    start.linkTo(box1.end)
                }
        )

        Box(
            modifier = Modifier
                .size(120.dp)
                .constrainAs(containerBox) {
                    bottom.linkTo(box1.top)
                    centerHorizontallyTo(box1)
                }
        ) {
            ConstraintLayout(
                modifier = Modifier.fillMaxSize()
            ) {
                val (miniBox1, miniBox2, miniBox3) = createRefs()

                Box(
                    modifier = Modifier
                        .size(40.dp)
                        .background(Color.Black)
                        .constrainAs(miniBox1) {
                            top.linkTo(parent.top)
                            end.linkTo(parent.end)
                        }
                )

                Box(
                    modifier = Modifier
                        .size(40.dp)
                        .background(Color.Black)
                        .constrainAs(miniBox2) {
                            centerTo(parent)
                        }
                )

                Box(
                    modifier = Modifier
                        .size(40.dp)
                        .background(Color.Cyan)
                        .constrainAs(miniBox3) {
                            bottom.linkTo(parent.bottom)
                            start.linkTo(parent.start)
                        }
                )
            }
        }

    }
    }

